/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type RequestImpersonate struct {

	// The _id of the user to impersonate
	UserId string `json:"userId"`
}

// AssertRequestImpersonateRequired checks if the required fields are not zero-ed
func AssertRequestImpersonateRequired(obj RequestImpersonate) error {
	elements := map[string]interface{}{
		"userId": obj.UserId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseRequestImpersonateRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of RequestImpersonate (e.g. [][]RequestImpersonate), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseRequestImpersonateRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aRequestImpersonate, ok := obj.(RequestImpersonate)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertRequestImpersonateRequired(aRequestImpersonate)
	})
}
