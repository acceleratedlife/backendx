/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Buck struct {

	Id string `json:"_id"`

	Name string `json:"name"`

	Ratio float32 `json:"ratio"`
}

// AssertBuckRequired checks if the required fields are not zero-ed
func AssertBuckRequired(obj Buck) error {
	elements := map[string]interface{}{
		"_id": obj.Id,
		"name": obj.Name,
		"ratio": obj.Ratio,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseBuckRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Buck (e.g. [][]Buck), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseBuckRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aBuck, ok := obj.(Buck)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertBuckRequired(aBuck)
	})
}
