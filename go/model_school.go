/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.2
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type School struct {

	Id string `json:"_id"`

	Name string `json:"name"`

	City string `json:"city"`

	AdminAddCode string `json:"adminAddCode"`

	Zip int32 `json:"zip"`
}

// AssertSchoolRequired checks if the required fields are not zero-ed
func AssertSchoolRequired(obj School) error {
	elements := map[string]interface{}{
		"_id": obj.Id,
		"name": obj.Name,
		"city": obj.City,
		"adminAddCode": obj.AdminAddCode,
		"zip": obj.Zip,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseSchoolRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of School (e.g. [][]School), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSchoolRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSchool, ok := obj.(School)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSchoolRequired(aSchool)
	})
}
