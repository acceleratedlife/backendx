/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type ResponseCryptoTransaction struct {

	Name string `json:"name,omitempty"`

	CreatedAt time.Time `json:"createdAt,omitempty"`

	Balance float32 `json:"balance"`

	Description string `json:"description,omitempty"`

	ConversionRatio float32 `json:"conversionRatio,omitempty"`

	Amount float32 `json:"amount,omitempty"`

	UBucks float32 `json:"uBucks,omitempty"`
}

// AssertResponseCryptoTransactionRequired checks if the required fields are not zero-ed
func AssertResponseCryptoTransactionRequired(obj ResponseCryptoTransaction) error {
	elements := map[string]interface{}{
		"balance": obj.Balance,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseResponseCryptoTransactionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ResponseCryptoTransaction (e.g. [][]ResponseCryptoTransaction), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseResponseCryptoTransactionRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aResponseCryptoTransaction, ok := obj.(ResponseCryptoTransaction)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertResponseCryptoTransactionRequired(aResponseCryptoTransaction)
	})
}
