/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.2
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type Transaction struct {

	Id time.Time `json:"_id"`

	OwnerId string `json:"owner_id,omitempty"`

	AccountId string `json:"account_id,omitempty"`

	Balance float32 `json:"balance"`

	Description string `json:"description"`

	ConversionRatio float32 `json:"conversionRatio"`

	Amount float32 `json:"amount"`

	UBucks float32 `json:"uBucks"`

	Type string `json:"type"`

	AssetID string `json:"assetID"`
}

// AssertTransactionRequired checks if the required fields are not zero-ed
func AssertTransactionRequired(obj Transaction) error {
	elements := map[string]interface{}{
		"_id": obj.Id,
		"balance": obj.Balance,
		"description": obj.Description,
		"conversionRatio": obj.ConversionRatio,
		"amount": obj.Amount,
		"uBucks": obj.UBucks,
		"type": obj.Type,
		"assetID": obj.AssetID,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseTransactionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Transaction (e.g. [][]Transaction), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseTransactionRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aTransaction, ok := obj.(Transaction)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertTransactionRequired(aTransaction)
	})
}
