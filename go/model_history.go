/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type History struct {

	Date time.Time `json:"date"`

	NetWorth float32 `json:"netWorth"`
}

// AssertHistoryRequired checks if the required fields are not zero-ed
func AssertHistoryRequired(obj History) error {
	elements := map[string]interface{}{
		"date": obj.Date,
		"netWorth": obj.NetWorth,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseHistoryRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of History (e.g. [][]History), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseHistoryRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aHistory, ok := obj.(History)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertHistoryRequired(aHistory)
	})
}
