/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AllApiController binds http requests to an api service and writes the service results to the http response
type AllApiController struct {
	service      AllApiServicer
	errorHandler ErrorHandler
}

// AllApiOption for how the controller is set up.
type AllApiOption func(*AllApiController)

// WithAllApiErrorHandler inject ErrorHandler into controller
func WithAllApiErrorHandler(h ErrorHandler) AllApiOption {
	return func(c *AllApiController) {
		c.errorHandler = h
	}
}

// NewAllApiController creates a default api controller
func NewAllApiController(s AllApiServicer, opts ...AllApiOption) Router {
	controller := &AllApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the AllApiController
func (c *AllApiController) Routes() Routes {
	return Routes{
		{
			"AuthUser",
			strings.ToUpper("Get"),
			"/api/users/auth",
			c.AuthUser,
		},
		{
			"ConfirmEmail",
			strings.ToUpper("Get"),
			"/api/users/confirmEmail",
			c.ConfirmEmail,
		},
		{
			"DeleteAuction",
			strings.ToUpper("Delete"),
			"/api/auctions/auction",
			c.DeleteAuction,
		},
		{
			"ExchangeRate",
			strings.ToUpper("Get"),
			"/api/accounts/exchangeRate",
			c.ExchangeRate,
		},
		{
			"Login",
			strings.ToUpper("Post"),
			"/api/users/login",
			c.Login,
		},
		{
			"Logout",
			strings.ToUpper("Get"),
			"/api/users/logout",
			c.Logout,
		},
		{
			"MakeAuction",
			strings.ToUpper("Post"),
			"/api/auctions",
			c.MakeAuction,
		},
		{
			"PayTransaction",
			strings.ToUpper("Post"),
			"/api/transactions/payTransaction",
			c.PayTransaction,
		},
		{
			"SearchAccount",
			strings.ToUpper("Get"),
			"/api/accounts/account",
			c.SearchAccount,
		},
		{
			"SearchAllBucks",
			strings.ToUpper("Get"),
			"/api/bucks",
			c.SearchAllBucks,
		},
		{
			"SearchClass",
			strings.ToUpper("Get"),
			"/api/classes/class",
			c.SearchClass,
		},
		{
			"SearchClasses",
			strings.ToUpper("Get"),
			"/api/classes",
			c.SearchClasses,
		},
		{
			"SearchMarketItems",
			strings.ToUpper("Get"),
			"/api/marketItems",
			c.SearchMarketItems,
		},
		{
			"SearchSchool",
			strings.ToUpper("Get"),
			"/api/schools/school",
			c.SearchSchool,
		},
		{
			"SearchStudent",
			strings.ToUpper("Get"),
			"/api/users/user",
			c.SearchStudent,
		},
		{
			"SearchStudentBucks",
			strings.ToUpper("Get"),
			"/api/accounts/all",
			c.SearchStudentBucks,
		},
		{
			"SearchStudents",
			strings.ToUpper("Get"),
			"/api/users",
			c.SearchStudents,
		},
		{
			"SearchTeachers",
			strings.ToUpper("Get"),
			"/api/teachers",
			c.SearchTeachers,
		},
		{
			"UserEdit",
			strings.ToUpper("Put"),
			"/api/users/user",
			c.UserEdit,
		},
	}
}

// AuthUser - return authenticated user details
func (c *AllApiController) AuthUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AuthUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ConfirmEmail - confirm email
func (c *AllApiController) ConfirmEmail(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	tokenParam := query.Get("token")
	result, err := c.service.ConfirmEmail(r.Context(), tokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteAuction - delete auction
func (c *AllApiController) DeleteAuction(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.DeleteAuction(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExchangeRate - returns exchange rate between 2 buck accounts
func (c *AllApiController) ExchangeRate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	sellCurrencyParam := query.Get("sellCurrency")
	buyCurrencyParam := query.Get("buyCurrency")
	result, err := c.service.ExchangeRate(r.Context(), sellCurrencyParam, buyCurrencyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Login - logging in
func (c *AllApiController) Login(w http.ResponseWriter, r *http.Request) {
	requestLoginParam := RequestLogin{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestLoginParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestLoginRequired(requestLoginParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Login(r.Context(), requestLoginParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// Logout - logout
func (c *AllApiController) Logout(w http.ResponseWriter, r *http.Request) {
	idParam := r.Header.Get("_id")
	result, err := c.service.Logout(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MakeAuction - make a new auction
func (c *AllApiController) MakeAuction(w http.ResponseWriter, r *http.Request) {
	requestMakeAuctionParam := RequestMakeAuction{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMakeAuctionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMakeAuctionRequired(requestMakeAuctionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MakeAuction(r.Context(), requestMakeAuctionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PayTransaction - When a teacher or admin is paying/debting a student with their own bucks
func (c *AllApiController) PayTransaction(w http.ResponseWriter, r *http.Request) {
	requestPayTransactionParam := RequestPayTransaction{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestPayTransactionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestPayTransactionRequired(requestPayTransactionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PayTransaction(r.Context(), requestPayTransactionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchAccount - searches for a account
func (c *AllApiController) SearchAccount(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.SearchAccount(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchAllBucks - searches all bucks
func (c *AllApiController) SearchAllBucks(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchAllBucks(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchClass - searches for a class
func (c *AllApiController) SearchClass(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.SearchClass(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchClasses - searches for users classes
func (c *AllApiController) SearchClasses(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchClasses(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchMarketItems - all market items relitive to this user
func (c *AllApiController) SearchMarketItems(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.SearchMarketItems(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchSchool - searches for a school
func (c *AllApiController) SearchSchool(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.SearchSchool(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchStudent - return one student
func (c *AllApiController) SearchStudent(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.SearchStudent(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchStudentBucks - returns all buck accounts for specific user
func (c *AllApiController) SearchStudentBucks(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchStudentBucks(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchStudents - return all students from a school
func (c *AllApiController) SearchStudents(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchStudents(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchTeachers - all the teachers that are at the same school of the user
func (c *AllApiController) SearchTeachers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchTeachers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UserEdit - edit a user
func (c *AllApiController) UserEdit(w http.ResponseWriter, r *http.Request) {
	usersUserBodyParam := UsersUserBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&usersUserBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUsersUserBodyRequired(usersUserBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UserEdit(r.Context(), usersUserBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
