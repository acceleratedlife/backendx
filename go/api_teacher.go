/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// TeacherApiController binds http requests to an api service and writes the service results to the http response
type TeacherApiController struct {
	service      TeacherApiServicer
	errorHandler ErrorHandler
}

// TeacherApiOption for how the controller is set up.
type TeacherApiOption func(*TeacherApiController)

// WithTeacherApiErrorHandler inject ErrorHandler into controller
func WithTeacherApiErrorHandler(h ErrorHandler) TeacherApiOption {
	return func(c *TeacherApiController) {
		c.errorHandler = h
	}
}

// NewTeacherApiController creates a default api controller
func NewTeacherApiController(s TeacherApiServicer, opts ...TeacherApiOption) Router {
	controller := &TeacherApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the TeacherApiController
func (c *TeacherApiController) Routes() Routes {
	return Routes{
		{
			"TeacherAddClass",
			strings.ToUpper("Put"),
			"/api/classes/addAdmin",
			c.TeacherAddClass,
		},
	}
}

// TeacherAddClass - teacher adding self to class
func (c *TeacherApiController) TeacherAddClass(w http.ResponseWriter, r *http.Request) {
	classesAddAdminBodyParam := ClassesAddAdminBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&classesAddAdminBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertClassesAddAdminBodyRequired(classesAddAdminBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TeacherAddClass(r.Context(), classesAddAdminBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
