/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// SysAdminApiController binds http requests to an api service and writes the service results to the http response
type SysAdminApiController struct {
	service      SysAdminApiServicer
	errorHandler ErrorHandler
}

// SysAdminApiOption for how the controller is set up.
type SysAdminApiOption func(*SysAdminApiController)

// WithSysAdminApiErrorHandler inject ErrorHandler into controller
func WithSysAdminApiErrorHandler(h ErrorHandler) SysAdminApiOption {
	return func(c *SysAdminApiController) {
		c.errorHandler = h
	}
}

// NewSysAdminApiController creates a default api controller
func NewSysAdminApiController(s SysAdminApiServicer, opts ...SysAdminApiOption) Router {
	controller := &SysAdminApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the SysAdminApiController
func (c *SysAdminApiController) Routes() Routes {
	return Routes{
		{
			"DeleteAccount",
			strings.ToUpper("Delete"),
			"/api/accounts/account",
			c.DeleteAccount,
		},
		{
			"DeleteSchool",
			strings.ToUpper("Delete"),
			"/api/schools/school",
			c.DeleteSchool,
		},
		{
			"EditAccount",
			strings.ToUpper("Put"),
			"/api/accounts/account",
			c.EditAccount,
		},
		{
			"EditBuck",
			strings.ToUpper("Put"),
			"/api/bucks/buck",
			c.EditBuck,
		},
		{
			"EditSchool",
			strings.ToUpper("Put"),
			"/api/schools/school",
			c.EditSchool,
		},
		{
			"GetSchoolUsers",
			strings.ToUpper("Get"),
			"/api/schools/users",
			c.GetSchoolUsers,
		},
		{
			"GetSchools",
			strings.ToUpper("Get"),
			"/api/schools",
			c.GetSchools,
		},
		{
			"ImpersonateUser",
			strings.ToUpper("Post"),
			"/api/impersonate",
			c.ImpersonateUser,
		},
		{
			"MakeAccount",
			strings.ToUpper("Post"),
			"/api/accounts/account",
			c.MakeAccount,
		},
		{
			"MakeSchool",
			strings.ToUpper("Post"),
			"/api/schools/school",
			c.MakeSchool,
		},
		{
			"MessageAll",
			strings.ToUpper("Post"),
			"/api/message",
			c.MessageAll,
		},
		{
			"MessageAllSchool",
			strings.ToUpper("Post"),
			"/api/message/school",
			c.MessageAllSchool,
		},
		{
			"MessageAllSchoolStaff",
			strings.ToUpper("Post"),
			"/api/message/school/staff",
			c.MessageAllSchoolStaff,
		},
		{
			"MessageAllSchoolStudents",
			strings.ToUpper("Post"),
			"/api/message/school/students",
			c.MessageAllSchoolStudents,
		},
		{
			"MessageAllStaff",
			strings.ToUpper("Post"),
			"/api/message/staff",
			c.MessageAllStaff,
		},
		{
			"MessageAllStudents",
			strings.ToUpper("Post"),
			"/api/message/students",
			c.MessageAllStudents,
		},
		{
			"MessageUser",
			strings.ToUpper("Post"),
			"/api/message/user",
			c.MessageUser,
		},
	}
}

// DeleteAccount - delete school
func (c *SysAdminApiController) DeleteAccount(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.DeleteAccount(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSchool - delete school
func (c *SysAdminApiController) DeleteSchool(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.DeleteSchool(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditAccount - edit account
func (c *SysAdminApiController) EditAccount(w http.ResponseWriter, r *http.Request) {
	accountsAccountBodyParam := AccountsAccountBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&accountsAccountBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccountsAccountBodyRequired(accountsAccountBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditAccount(r.Context(), accountsAccountBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditBuck - edit buck
func (c *SysAdminApiController) EditBuck(w http.ResponseWriter, r *http.Request) {
	bucksBuckBodyParam := BucksBuckBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bucksBuckBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBucksBuckBodyRequired(bucksBuckBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditBuck(r.Context(), bucksBuckBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// EditSchool - edit school
func (c *SysAdminApiController) EditSchool(w http.ResponseWriter, r *http.Request) {
	schoolsSchoolBodyParam := SchoolsSchoolBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&schoolsSchoolBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSchoolsSchoolBodyRequired(schoolsSchoolBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.EditSchool(r.Context(), schoolsSchoolBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSchoolUsers - return all users of school
func (c *SysAdminApiController) GetSchoolUsers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.GetSchoolUsers(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSchools - return all schools
func (c *SysAdminApiController) GetSchools(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetSchools(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ImpersonateUser - Issue a short-lived JWT (and XSRF token) for user impersonation
func (c *SysAdminApiController) ImpersonateUser(w http.ResponseWriter, r *http.Request) {
	requestImpersonateParam := RequestImpersonate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestImpersonateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestImpersonateRequired(requestImpersonateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ImpersonateUser(r.Context(), requestImpersonateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MakeAccount - make account
func (c *SysAdminApiController) MakeAccount(w http.ResponseWriter, r *http.Request) {
	accountsAccountBody1Param := AccountsAccountBody1{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&accountsAccountBody1Param); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAccountsAccountBody1Required(accountsAccountBody1Param); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MakeAccount(r.Context(), accountsAccountBody1Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MakeSchool - make a new school
func (c *SysAdminApiController) MakeSchool(w http.ResponseWriter, r *http.Request) {
	requestMakeSchoolParam := RequestMakeSchool{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMakeSchoolParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMakeSchoolRequired(requestMakeSchoolParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MakeSchool(r.Context(), requestMakeSchoolParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MessageAll - send a message to all users
func (c *SysAdminApiController) MessageAll(w http.ResponseWriter, r *http.Request) {
	requestMessageParam := RequestMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMessageRequired(requestMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MessageAll(r.Context(), requestMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MessageAllSchool - send a message to all users of a school
func (c *SysAdminApiController) MessageAllSchool(w http.ResponseWriter, r *http.Request) {
	requestMessageParam := RequestMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMessageRequired(requestMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MessageAllSchool(r.Context(), requestMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MessageAllSchoolStaff - send a message to all staff of a school
func (c *SysAdminApiController) MessageAllSchoolStaff(w http.ResponseWriter, r *http.Request) {
	requestMessageParam := RequestMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMessageRequired(requestMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MessageAllSchoolStaff(r.Context(), requestMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MessageAllSchoolStudents - send a message to all school students
func (c *SysAdminApiController) MessageAllSchoolStudents(w http.ResponseWriter, r *http.Request) {
	requestMessageParam := RequestMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMessageRequired(requestMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MessageAllSchoolStudents(r.Context(), requestMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MessageAllStaff - send a message to all staff
func (c *SysAdminApiController) MessageAllStaff(w http.ResponseWriter, r *http.Request) {
	requestMessageParam := RequestMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMessageRequired(requestMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MessageAllStaff(r.Context(), requestMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MessageAllStudents - send a message to all students
func (c *SysAdminApiController) MessageAllStudents(w http.ResponseWriter, r *http.Request) {
	requestMessageParam := RequestMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMessageRequired(requestMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MessageAllStudents(r.Context(), requestMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MessageUser - send a message to one user
func (c *SysAdminApiController) MessageUser(w http.ResponseWriter, r *http.Request) {
	requestMessageParam := RequestMessage{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMessageParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMessageRequired(requestMessageParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MessageUser(r.Context(), requestMessageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
