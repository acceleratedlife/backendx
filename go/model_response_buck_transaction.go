/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.2
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type ResponseBuckTransaction struct {

	CreatedAt time.Time `json:"createdAt"`

	Balance float32 `json:"balance"`

	Description string `json:"description"`

	Conversion float32 `json:"conversion"`

	Amount float32 `json:"amount"`

	Name string `json:"name"`
}

// AssertResponseBuckTransactionRequired checks if the required fields are not zero-ed
func AssertResponseBuckTransactionRequired(obj ResponseBuckTransaction) error {
	elements := map[string]interface{}{
		"createdAt": obj.CreatedAt,
		"balance": obj.Balance,
		"description": obj.Description,
		"conversion": obj.Conversion,
		"amount": obj.Amount,
		"name": obj.Name,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseResponseBuckTransactionRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ResponseBuckTransaction (e.g. [][]ResponseBuckTransaction), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseResponseBuckTransactionRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aResponseBuckTransaction, ok := obj.(ResponseBuckTransaction)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertResponseBuckTransactionRequired(aResponseBuckTransaction)
	})
}
