/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type User struct {

	History []History `json:"history"`

	Id string `json:"_id"`

	CollegeEnd time.Time `json:"collegeEnd,omitempty"`

	TransitionEnd time.Time `json:"transitionEnd,omitempty"`

	FirstName string `json:"firstName"`

	LastName string `json:"lastName"`

	Email string `json:"email"`

	Confirmed bool `json:"confirmed"`

	SchoolId string `json:"school_id,omitempty"`

	College bool `json:"college"`

	CareerTransition bool `json:"careerTransition"`

	TaxableIncome int32 `json:"taxableIncome"`

	Income float32 `json:"income"`

	Role int32 `json:"role"`

	Rank int32 `json:"rank"`

	NetWorth float32 `json:"netWorth"`

	Job UserNoHistoryJob `json:"job"`

	LottoPlay int32 `json:"lottoPlay,omitempty"`

	LottoWin int32 `json:"lottoWin,omitempty"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	elements := map[string]interface{}{
		"history": obj.History,
		"_id": obj.Id,
		"firstName": obj.FirstName,
		"lastName": obj.LastName,
		"email": obj.Email,
		"confirmed": obj.Confirmed,
		"college": obj.College,
		"careerTransition": obj.CareerTransition,
		"taxableIncome": obj.TaxableIncome,
		"income": obj.Income,
		"role": obj.Role,
		"rank": obj.Rank,
		"netWorth": obj.NetWorth,
		"job": obj.Job,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.History {
		if err := AssertHistoryRequired(el); err != nil {
			return err
		}
	}
	if err := AssertUserNoHistoryJobRequired(obj.Job); err != nil {
		return err
	}
	return nil
}

// AssertRecurseUserRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of User (e.g. [][]User), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseUserRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aUser, ok := obj.(User)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertUserRequired(aUser)
	})
}
