/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type ResponseAuctionStudent struct {

	Id time.Time `json:"_id"`

	Bid float32 `json:"bid"`

	Active bool `json:"active"`

	Approved bool `json:"approved"`

	Approver string `json:"approver,omitempty"`

	Description string `json:"description"`

	EndDate time.Time `json:"endDate"`

	StartDate time.Time `json:"startDate"`

	OwnerId ResponseAuctionStudentOwnerId `json:"owner_id"`

	WinnerId ResponseAuctionStudentOwnerId `json:"winner_id"`
}

// AssertResponseAuctionStudentRequired checks if the required fields are not zero-ed
func AssertResponseAuctionStudentRequired(obj ResponseAuctionStudent) error {
	elements := map[string]interface{}{
		"_id": obj.Id,
		"bid": obj.Bid,
		"active": obj.Active,
		"approved": obj.Approved,
		"description": obj.Description,
		"endDate": obj.EndDate,
		"startDate": obj.StartDate,
		"owner_id": obj.OwnerId,
		"winner_id": obj.WinnerId,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertResponseAuctionStudentOwnerIdRequired(obj.OwnerId); err != nil {
		return err
	}
	if err := AssertResponseAuctionStudentOwnerIdRequired(obj.WinnerId); err != nil {
		return err
	}
	return nil
}

// AssertRecurseResponseAuctionStudentRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ResponseAuctionStudent (e.g. [][]ResponseAuctionStudent), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseResponseAuctionStudentRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aResponseAuctionStudent, ok := obj.(ResponseAuctionStudent)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertResponseAuctionStudentRequired(aResponseAuctionStudent)
	})
}
