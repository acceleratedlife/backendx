/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"time"
)

type ResponseAuctionStudentInner struct {

	Id string `json:"_id,omitempty"`

	Bid float32 `json:"bid,omitempty"`

	Description string `json:"description,omitempty"`

	EndDate time.Time `json:"endDate,omitempty"`

	StartDate time.Time `json:"startDate,omitempty"`

	ItemNumber string `json:"itemNumber,omitempty"`

	Owner ResponseAuctionStudentInnerOwner `json:"owner,omitempty"`

	Winner ResponseAuctionStudentInnerWinner `json:"winner,omitempty"`
}

// AssertResponseAuctionStudentInnerRequired checks if the required fields are not zero-ed
func AssertResponseAuctionStudentInnerRequired(obj ResponseAuctionStudentInner) error {
	if err := AssertResponseAuctionStudentInnerOwnerRequired(obj.Owner); err != nil {
		return err
	}
	if err := AssertResponseAuctionStudentInnerWinnerRequired(obj.Winner); err != nil {
		return err
	}
	return nil
}

// AssertRecurseResponseAuctionStudentInnerRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ResponseAuctionStudentInner (e.g. [][]ResponseAuctionStudentInner), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseResponseAuctionStudentInnerRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aResponseAuctionStudentInner, ok := obj.(ResponseAuctionStudentInner)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertResponseAuctionStudentInnerRequired(aResponseAuctionStudentInner)
	})
}
