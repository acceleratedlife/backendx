/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ResponseAccounts struct {
	Conversion float32 `json:"converion,omitempty"`

	History []History `json:"history,omitempty"`

	Bucks ResponseAccountsBucks `json:"bucks,omitempty"`

	Balance float32 `json:"balance,omitempty"`

	Id string `json:"_id,omitempty"`

	TypeId string `json:"type_id,omitempty"`
}

// AssertResponseAccountsRequired checks if the required fields are not zero-ed
func AssertResponseAccountsRequired(obj ResponseAccounts) error {
	for _, el := range obj.History {
		if err := AssertHistoryRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResponseAccountsBucksRequired(obj.Bucks); err != nil {
		return err
	}
	return nil
}

// AssertRecurseResponseAccountsRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ResponseAccounts (e.g. [][]ResponseAccounts), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseResponseAccountsRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aResponseAccounts, ok := obj.(ResponseAccounts)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertResponseAccountsRequired(aResponseAccounts)
	})
}
