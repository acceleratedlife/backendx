/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.2
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// StudentApiController binds http requests to an api service and writes the service results to the http response
type StudentApiController struct {
	service      StudentApiServicer
	errorHandler ErrorHandler
}

// StudentApiOption for how the controller is set up.
type StudentApiOption func(*StudentApiController)

// WithStudentApiErrorHandler inject ErrorHandler into controller
func WithStudentApiErrorHandler(h ErrorHandler) StudentApiOption {
	return func(c *StudentApiController) {
		c.errorHandler = h
	}
}

// NewStudentApiController creates a default api controller
func NewStudentApiController(s StudentApiServicer, opts ...StudentApiOption) Router {
	controller := &StudentApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the StudentApiController
func (c *StudentApiController) Routes() Routes {
	return Routes{
		{
			"AuctionBid",
			strings.ToUpper("Put"),
			"/api/auctions/placeBid",
			c.AuctionBid,
		},
		{
			"BuckConvert",
			strings.ToUpper("Post"),
			"/api/transactions/conversionTransaction",
			c.BuckConvert,
		},
		{
			"BuyCD",
			strings.ToUpper("Post"),
			"/api/transactions/CDTransaction",
			c.BuyCD,
		},
		{
			"CryptoConvert",
			strings.ToUpper("Post"),
			"/api/transactions/cryptoTransaction",
			c.CryptoConvert,
		},
		{
			"LatestLotto",
			strings.ToUpper("Get"),
			"/api/lottery/latest",
			c.LatestLotto,
		},
		{
			"LottoPurchase",
			strings.ToUpper("Put"),
			"/api/lottery/purchase",
			c.LottoPurchase,
		},
		{
			"MarketItemBuy",
			strings.ToUpper("Put"),
			"/api/marketItems/buy",
			c.MarketItemBuy,
		},
		{
			"PreviousLotto",
			strings.ToUpper("Get"),
			"/api/lottery/previous",
			c.PreviousLotto,
		},
		{
			"RefundCD",
			strings.ToUpper("Put"),
			"/api/transactions/CDRefund",
			c.RefundCD,
		},
		{
			"SearchAuctionsStudent",
			strings.ToUpper("Get"),
			"/api/auctions/student",
			c.SearchAuctionsStudent,
		},
		{
			"SearchAuctionsStudentStream",
			strings.ToUpper("Get"),
			"/api/auctions/student/stream",
			c.SearchAuctionsStudentStream,
		},
		{
			"SearchBuck",
			strings.ToUpper("Get"),
			"/api/bucks/buck",
			c.SearchBuck,
		},
		{
			"SearchBuckTransactions",
			strings.ToUpper("Get"),
			"/api/transactions/buckTransactions",
			c.SearchBuckTransactions,
		},
		{
			"SearchCDS",
			strings.ToUpper("Get"),
			"/api/accounts/CDS",
			c.SearchCDS,
		},
		{
			"SearchCDTransactions",
			strings.ToUpper("Get"),
			"/api/transactions/CDTransactions",
			c.SearchCDTransactions,
		},
		{
			"SearchCrypto",
			strings.ToUpper("Get"),
			"/api/accounts/crypto",
			c.SearchCrypto,
		},
		{
			"SearchCryptoTransaction",
			strings.ToUpper("Get"),
			"/api/transactions/cryptoTransactions",
			c.SearchCryptoTransaction,
		},
		{
			"SearchStudentCrypto",
			strings.ToUpper("Get"),
			"/api/accounts/allCrypto",
			c.SearchStudentCrypto,
		},
		{
			"SearchStudentUbuck",
			strings.ToUpper("Get"),
			"/api/accounts/account/student",
			c.SearchStudentUbuck,
		},
		{
			"StudentAddClass",
			strings.ToUpper("Put"),
			"/api/classes/addClass",
			c.StudentAddClass,
		},
	}
}

// AuctionBid - auction bid
func (c *StudentApiController) AuctionBid(w http.ResponseWriter, r *http.Request) {
	requestAuctionBidParam := RequestAuctionBid{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestAuctionBidParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestAuctionBidRequired(requestAuctionBidParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AuctionBid(r.Context(), requestAuctionBidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// BuckConvert - When a student is converting between 2 bucks
func (c *StudentApiController) BuckConvert(w http.ResponseWriter, r *http.Request) {
	requestBuckConvertParam := RequestBuckConvert{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestBuckConvertParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestBuckConvertRequired(requestBuckConvertParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BuckConvert(r.Context(), requestBuckConvertParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// BuyCD - When a student is buying a cd
func (c *StudentApiController) BuyCD(w http.ResponseWriter, r *http.Request) {
	requestBuyCdParam := RequestBuyCd{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestBuyCdParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestBuyCdRequired(requestBuyCdParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BuyCD(r.Context(), requestBuyCdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CryptoConvert - When a student is converting between uBucks and Cryptos
func (c *StudentApiController) CryptoConvert(w http.ResponseWriter, r *http.Request) {
	requestCryptoConvertParam := RequestCryptoConvert{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestCryptoConvertParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestCryptoConvertRequired(requestCryptoConvertParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CryptoConvert(r.Context(), requestCryptoConvertParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// LatestLotto - get current lotto game
func (c *StudentApiController) LatestLotto(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.LatestLotto(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// LottoPurchase - purchase lotto ticket
func (c *StudentApiController) LottoPurchase(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	quantityParam, err := parseInt32Parameter(query.Get("quantity"), true)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.LottoPurchase(r.Context(), quantityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// MarketItemBuy - market purchase
func (c *StudentApiController) MarketItemBuy(w http.ResponseWriter, r *http.Request) {
	requestMarketRefundParam := RequestMarketRefund{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestMarketRefundParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestMarketRefundRequired(requestMarketRefundParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MarketItemBuy(r.Context(), requestMarketRefundParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// PreviousLotto - get previous lotto game
func (c *StudentApiController) PreviousLotto(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.PreviousLotto(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RefundCD - When a student is buying a cd
func (c *StudentApiController) RefundCD(w http.ResponseWriter, r *http.Request) {
	requestUserParam := RequestUser{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestUserParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestUserRequired(requestUserParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RefundCD(r.Context(), requestUserParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchAuctionsStudent - searches auctions
func (c *StudentApiController) SearchAuctionsStudent(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchAuctionsStudent(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchAuctionsStudentStream - searches auctions
func (c *StudentApiController) SearchAuctionsStudentStream(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchAuctionsStudentStream(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchBuck - returns how much the student holds of this buck
func (c *StudentApiController) SearchBuck(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.SearchBuck(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchBuckTransactions - searches for buck transactions
func (c *StudentApiController) SearchBuckTransactions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchBuckTransactions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchCDS - returns active certificate of deposit portfolio
func (c *StudentApiController) SearchCDS(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchCDS(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchCDTransactions - searches for CD transactions
func (c *StudentApiController) SearchCDTransactions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchCDTransactions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchCrypto - returns the given crypto price, how many are owned and how many ubucks the user has.
func (c *StudentApiController) SearchCrypto(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	nameParam := query.Get("name")
	result, err := c.service.SearchCrypto(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchCryptoTransaction - searches for Crypto transactions
func (c *StudentApiController) SearchCryptoTransaction(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchCryptoTransaction(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchStudentCrypto - returns all crypto accounts for specific user
func (c *StudentApiController) SearchStudentCrypto(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchStudentCrypto(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchStudentUbuck - searches accounts for UBuck for this student at this school
func (c *StudentApiController) SearchStudentUbuck(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SearchStudentUbuck(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// StudentAddClass - student adding self to class
func (c *StudentApiController) StudentAddClass(w http.ResponseWriter, r *http.Request) {
	requestAddClassParam := RequestAddClass{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestAddClassParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestAddClassRequired(requestAddClassParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.StudentAddClass(r.Context(), requestAddClassParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
