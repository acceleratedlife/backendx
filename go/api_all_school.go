/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
)

// AllSchoolApiController binds http requests to an api service and writes the service results to the http response
type AllSchoolApiController struct {
	service      AllSchoolApiServicer
	errorHandler ErrorHandler
}

// AllSchoolApiOption for how the controller is set up.
type AllSchoolApiOption func(*AllSchoolApiController)

// WithAllSchoolApiErrorHandler inject ErrorHandler into controller
func WithAllSchoolApiErrorHandler(h ErrorHandler) AllSchoolApiOption {
	return func(c *AllSchoolApiController) {
		c.errorHandler = h
	}
}

// NewAllSchoolApiController creates a default api controller
func NewAllSchoolApiController(s AllSchoolApiServicer, opts ...AllSchoolApiOption) Router {
	controller := &AllSchoolApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all of the api route for the AllSchoolApiController
func (c *AllSchoolApiController) Routes() Routes {
	return Routes{
		{
			"AddCodeClass",
			strings.ToUpper("Put"),
			"/api/classes/class/addCode",
			c.AddCodeClass,
		},
		{
			"RemoveClass",
			strings.ToUpper("Put"),
			"/api/classes/removeAdmin",
			c.RemoveClass,
		},
		{
			"SearchAuctions",
			strings.ToUpper("Get"),
			"/api/auctions/auction",
			c.SearchAuctions,
		},
		{
			"SearchMyClasses",
			strings.ToUpper("Get"),
			"/api/classes/member",
			c.SearchMyClasses,
		},
	}
}

// AddCodeClass - change class addCode
func (c *AllSchoolApiController) AddCodeClass(w http.ResponseWriter, r *http.Request) {
	requestUserParam := RequestUser{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestUserParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestUserRequired(requestUserParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddCodeClass(r.Context(), requestUserParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RemoveClass - remove self from class
func (c *AllSchoolApiController) RemoveClass(w http.ResponseWriter, r *http.Request) {
	requestKickClassParam := RequestKickClass{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestKickClassParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestKickClassRequired(requestKickClassParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RemoveClass(r.Context(), requestKickClassParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchAuctions - searches auctions
func (c *AllSchoolApiController) SearchAuctions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := query.Get("_id")
	result, err := c.service.SearchAuctions(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SearchMyClasses - searches for users classes that the requester is a member of
func (c *AllSchoolApiController) SearchMyClasses(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	idParam := RequestUser{
		query.Get("_id"),
	}
	result, err := c.service.SearchMyClasses(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
