/*
 * AL
 *
 * This is a simple API
 *
 * API version: 1.0.1
 * Contact: you@your-company.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ResponseCurrencyExchange struct {

	Conversion float32 `json:"conversion"`

	History []History `json:"history,omitempty"`

	Buck ResponseCurrencyExchangeBuck `json:"buck,omitempty"`

	Balance float32 `json:"balance"`

	Id string `json:"_id,omitempty"`

	TypeId string `json:"type_id,omitempty"`
}

// AssertResponseCurrencyExchangeRequired checks if the required fields are not zero-ed
func AssertResponseCurrencyExchangeRequired(obj ResponseCurrencyExchange) error {
	elements := map[string]interface{}{
		"conversion": obj.Conversion,
		"balance": obj.Balance,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.History {
		if err := AssertHistoryRequired(el); err != nil {
			return err
		}
	}
	if err := AssertResponseCurrencyExchangeBuckRequired(obj.Buck); err != nil {
		return err
	}
	return nil
}

// AssertRecurseResponseCurrencyExchangeRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ResponseCurrencyExchange (e.g. [][]ResponseCurrencyExchange), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseResponseCurrencyExchangeRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aResponseCurrencyExchange, ok := obj.(ResponseCurrencyExchange)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertResponseCurrencyExchangeRequired(aResponseCurrencyExchange)
	})
}
